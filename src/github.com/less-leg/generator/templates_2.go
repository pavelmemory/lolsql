package generator

import (
	"github.com/less-leg/utils"
	"strings"
	"text/template"
)

var Package2, _ = template.New("").Parse(`package {{.}}`)

var Imports2, _ = template.New("").Parse(`
import (
{{range .}}
{{.}}
{{end}}
)
var invalidImportProtector = utils.InvalidImportProtection

// This code was auto-generated by LOLSQL code-generation tool.
// Please do not modify it manually. All changes will be deleted after regeneration.
`)

var Column_interface2, _ = template.New("").Parse(`
type column interface {
	Column() string
}
`)

var Lol_struct2, _ = template.New("").Parse(`
type lol struct {
	selectColumns []column
	whereInited   bool
}

func (this *lol) Render() string {
	if (len(this.selectColumns) == 0) {
		return "select {{index . 1}} from {{index . 0}}"
	}
	cols := make([]string, 0, len(this.selectColumns))
	for _, selectColumn := range this.selectColumns {
		cols = append(cols, selectColumn.Column())
	}
	return "select " + strings.Join(cols, ", ") + " from {{index . 0}}"
}

func (this *lol) Where(cond LolCondition) *lolWhere {
	if this.whereInited {
		panic("Invalid usage of WHERE statement: double usage not supported.")
	}
	this.whereInited = true
	return &lolWhere{retrieval:this, condition:cond}
}
`)

var Select_func2, _ = template.New("").Parse(`
func Select(selects ...column) *lol {
	return &lol{selectColumns:selects}
}
`)

var LolWhere_struct2, _ = template.New("").Parse(`
type lolWhere struct {
	retrieval *lol
	condition LolCondition
	next      []LolCondition
}

func (this *lolWhere) Render() string {
	if len(this.next) > 0 {
		conds := make([]string, 0, len(this.next))
		for _, cond := range this.next {
			conds = append(conds, cond.Render())
		}
		return this.retrieval.Render() + " where (" + this.condition.Render() + ") " + strings.Join(conds, " ")
	}
	return this.retrieval.Render() + " where " + this.condition.Render()
}

func (this *lolWhere) And(cond LolCondition) *lolWhere {
	if this.next == nil {
		this.next = make([]LolCondition, 0, 1)
	}
	this.next = append(this.next, &lolConditionAnd{LolCondition: cond})
	return this
}

func (this *lolWhere) Or(cond LolCondition) *lolWhere {
	if this.next == nil {
		this.next = make([]LolCondition, 0, 1)
	}
	this.next = append(this.next, &lolConditionOr{LolCondition: cond})
	return this
}
`)

var LolConditionAnd_struct2, _ = template.New("").Parse(`
type lolConditionAnd struct {
	HasNext
	LolCondition
}

func (this *lolConditionAnd) render() string {
	return "and (" + this.LolCondition.Render() + ")"
}

func (this *lolConditionAnd) Render() string {
	if this.Next() != nil {
		return this.render() + " " + this.Next().Render()
	}
	return this.render()
}

func (this *lolConditionAnd) And(cond LolCondition) LolCondition {
	this.SetNext(&lolConditionAnd{LolCondition:cond})
	return this
}

func (this *lolConditionAnd) Or(cond LolCondition) LolCondition {
	this.SetNext(&lolConditionOr{LolCondition:cond})
	return this
}

func (this *lolConditionAnd) Next() LolCondition {
	return this.HasNext.Next()
}

func (this *lolConditionAnd) SetNext(n LolCondition) {
	this.HasNext.SetNext(n)
}
`)

var LolConditionOr_struct2, _ = template.New("").Parse(`
type lolConditionOr struct {
	HasNext
	LolCondition
}

func (this *lolConditionOr) render() string {
	return "or (" + this.LolCondition.Render() + ")"
}

func (this *lolConditionOr) Render() string {
	if this.Next() != nil {
		return this.render() + " " + this.Next().Render()
	}
	return this.render()
}

func (this *lolConditionOr) And(cond LolCondition) LolCondition {
	this.SetNext(&lolConditionAnd{LolCondition:cond})
	return this
}

func (this *lolConditionOr) Or(cond LolCondition) LolCondition {
	this.SetNext(&lolConditionOr{LolCondition:cond})
	return this
}

func (this *lolConditionOr) Next() LolCondition {
	return this.HasNext.Next()
}

func (this *lolConditionOr) SetNext(n LolCondition) {
	this.HasNext.SetNext(n)
}
`)

var ColumnStub_struct2, _ = template.New("").Funcs(
	template.FuncMap{
		"Title": strings.Title,
		"ToLower": strings.ToLower,
		"DotToUnderscore": utils.DotToUnderscore}).Parse(`
{{range .}}
type {{index . 0 | ToLower | DotToUnderscore}}Stub struct { column }
var {{index . 0 | ToLower | DotToUnderscore}}StubConst {{index . 0 | ToLower | DotToUnderscore}}Stub
func {{index . 0 | Title | DotToUnderscore}}() *{{index . 0 | ToLower | DotToUnderscore}}Stub {return &{{index . 0 | ToLower | DotToUnderscore}}StubConst}
func (*{{index . 0 | ToLower | DotToUnderscore}}Stub) Column() string {return "{{index . 1}}"}
{{end}}
`)

var ConditionByField2, _ = template.New("").Funcs(template.FuncMap{
	"Title": strings.Title,
	"ToLower": strings.ToLower,
	"DotToUnderscore": utils.DotToUnderscore}).Parse(`
type {{index .FieldToColumn 0 | ToLower}}{{Title .StructName}} struct {
	{{ToLower .Selector}}{{if .Selector}}_{{end}}{{index .FieldToColumn 0 | ToLower | DotToUnderscore}}Stub
	HasNext
	values   []{{.IsNullable}}{{.TypeName}}
	operation ConditionConstant
}

func (this *{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}) Values() []{{.IsNullable}}{{.TypeName}} {
	return this.values
}

func (this *{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}) render() string {
	if conditionRenderer, found := ConditionRenderingMap[this.operation]; found {
		return conditionRenderer(this)
	}
	panic("Not supported operation for: {{.TypeName}}")
}

func (this *{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}) Render() string {
	if this.Next() != nil {
		return this.render() + " " + this.Next().Render()
	}
	return this.render()
}

func (this *{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}) And(cond LolCondition) LolCondition {
	this.SetNext(&lolConditionAnd{LolCondition:cond})
	return this
}

func (this *{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}) Or(cond LolCondition) LolCondition {
	this.SetNext(&lolConditionOr{LolCondition:cond})
	return this
}

{{if .IsNullable}}
func {{index .FieldToColumn 0 | Title}}Is(values ...{{.IsNullable}}{{.TypeName}}) LolCondition {
	return &{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}{values:values, operation:DefineAmount(values, nil) | Equals}
}

func {{index .FieldToColumn 0 | Title}}IsNot(values ...{{.IsNullable}}{{.TypeName}}) LolCondition {
	return &{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}{values:values, operation:DefineAmount(values, nil) | Not | Equals}
}
{{else}}
func {{index .FieldToColumn 0 | Title}}Is(v0 {{.IsNullable}}{{.TypeName}}, vnext ...{{.IsNullable}}{{.TypeName}}) LolCondition {
	return &{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}{values:utils.Prepend{{Title .TypeName}}(v0, vnext), operation:DefineAmount(v0, vnext) | Equals}
}

func {{index .FieldToColumn 0 | Title}}IsNot(v0 {{.IsNullable}}{{.TypeName}}, vnext ...{{.IsNullable}}{{.TypeName}}) LolCondition {
	return &{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}{values:utils.Prepend{{Title .TypeName}}(v0, vnext), operation:DefineAmount(v0, vnext) | Not | Equals}
}
{{end}}

{{if .Likable}}{{if .IsNullable}}
func {{index .FieldToColumn 0 | Title}}Like(values ...{{.IsNullable}}{{.TypeName}}) LolCondition {
	return &{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}{values:values, operation:DefineAmount(values, nil) | Like}
}

func {{index .FieldToColumn 0 | Title}}NotLike(values ...{{.IsNullable}}{{.TypeName}}) LolCondition {
	return &{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}{values:values, operation:DefineAmount(values, nil) | Not | Like}
}
{{else}}
func {{index .FieldToColumn 0 | Title}}Like(v0 {{.TypeName}}, vnext ...{{.TypeName}}) LolCondition {
	return &{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}{values:utils.PrependString(v0, vnext), operation:DefineAmount(v0, vnext) | Like}
}

func {{index .FieldToColumn 0 | Title}}NotLike(v0 {{.TypeName}}, vnext ...{{.TypeName}}) LolCondition {
	return &{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}{values:utils.PrependString(v0, vnext), operation:DefineAmount(v0, vnext) | Not | Like}
}
{{end}}{{end}}
`)
