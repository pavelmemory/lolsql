package generator

import (
	"github.com/less-leg/utils"
	"strings"
	"text/template"
)

var Package, _ = template.New("").Parse(`package {{.}}`)

var Imports, _ = template.New("").Parse(`
import (
{{range .}}
{{.}}
{{end}}
)
var invalidImportProtector = utils.InvalidImportProtection

// This code was auto-generated by LOLSQL code-generation tool.
// Please do not modify it manually. All changes will be deleted after regeneration.
`)

var Column_interface, _ = template.New("").Parse(`
type column interface {
	Column() string
	FieldName() string
}
`)

var Scanner_struct, _ = template.New("").Parse(`
type holder struct {
	temporary       interface{}
	propagationFunc func(*{{.Package}}.{{.StructName}}, interface{})
}

func (this *holder) propagate(entity *{{.Package}}.{{.StructName}}) {
	this.propagationFunc(entity, this.temporary)
}

type scanner struct {
	sql        string
	holders    map[string]*holder
	fieldNames []string
}

func (this *scanner) InitPropagation(selects []column) {
	this.holders = make(map[string]*holder)

	for _, selectable := range selects {
		if _, found := this.holders[selectable.Column()]; found {
			panic("Incorrectly builded query string: Duplicate select field: " + selectable.FieldName())
		}

		var h *holder
		switch selectable.FieldName() {
		{{$package := .Package}}{{$structName := .StructName}}{{range .Fields}}
		case "{{.FieldName}}":
			h = &holder{
				{{if .NullableValueType}}temporary:new({{.NullableValueType}}),
				propagationFunc:func(entity *{{$package}}.{{$structName}}, tmp interface{}) {
					f := tmp.(*{{.NullableValueType}})
					if f.Valid {
						v := {{.FieldType}}(f.{{.NullableValueHolder}})
						entity.{{.FieldName}} = &v
					}
				},{{else}}
				temporary:new({{.FieldType}}),
				propagationFunc:func(entity *{{$package}}.{{$structName}}, tmp interface{}) {
					entity.{{.FieldName}} = *(tmp.(*{{.FieldType}}))
				},{{end}}
			}
		{{end}}
		default:
			panic(selectable.FieldName())
		}

		this.holders[selectable.FieldName()] = h
		this.fieldNames = append(this.fieldNames, selectable.FieldName())
	}
}

func (this *scanner) temporaries() []interface{} {
	temporaries := make([]interface{}, 0, len(this.fieldNames))
	for _, fieldName := range this.fieldNames {
		if holder, found := this.holders[fieldName]; found {
			temporaries = append(temporaries, holder.temporary)
		} else {
			panic("Selection builder has error: Holder for field was not found: " + fieldName)
		}
	}
	return temporaries
}

func (this *scanner) Fetch() *{{.Package}}.{{.StructName}} {
	entity := new({{.Package}}.{{.StructName}})
	for _, fieldName := range this.fieldNames {
		if holder, found := this.holders[fieldName]; found {
			holder.propagate(entity)
		} else {
			panic("Selection builder has error: Holder for field was not found: " + fieldName)
		}
	}
	return entity
}

func (this *scanner) Scan(db *sql.DB) ([]*{{.Package}}.{{.StructName}}, error) {
	rows, err := db.Query(this.sql)
	if err != nil {
		return nil, err
	}

	var fetched []*{{.Package}}.{{.StructName}}
	for rows.Next() {
		if err = rows.Scan(this.temporaries()...); err != nil {
			if errClose := rows.Close(); errClose != nil {
				return nil, fmt.Errorf("Cause: %s\nClose: %s", err.Error(), errClose.Error())
			}
			return nil, err
		}
		fetched = append(fetched, this.Fetch())
	}

	if err = rows.Err(); err != nil {
		return nil, err
	}

	if err = rows.Close(); err != nil {
		return nil, err
	}

	return fetched, nil
}
`)

var Lol_struct, _ = template.New("").Parse(`
type lol struct {
	selectColumns []column
	whereInited   bool
	scanner       scanner
}

func (this *lol) Fetch(db *sql.DB) ([]*{{.Package}}.{{.StructName}}, error) {
	this.scanner.InitPropagation(this.selectColumns)
	this.scanner.sql = this.Render()
	return this.scanner.Scan(db)
}

func (this *lol) Render() string {
	if (len(this.selectColumns) == 0) {
		return "select {{index .TableNameToColumns 1}} from {{index .TableNameToColumns 0}}"
	}
	cols := make([]string, 0, len(this.selectColumns))
	for _, selectColumn := range this.selectColumns {
		cols = append(cols, selectColumn.Column())
	}
	return "select " + strings.Join(cols, ", ") + " from {{index .TableNameToColumns 0}}"
}

func (this *lol) Where(cond LolCondition) *lolWhere {
	if this.whereInited {
		panic("Invalid usage of WHERE statement: double usage not supported.")
	}
	this.whereInited = true
	return &lolWhere{retrieval:this, condition:cond}
}
`)

var Select_func, _ = template.New("").Parse(`
func Select(selects ...column) *lol {
	if len(selects) < 1 {
		return &lol{selectColumns:SelectAllColumns}
	}
	return &lol{selectColumns:selects}
}
`)

var LolWhere_struct, _ = template.New("").Parse(`
type lolWhere struct {
	retrieval *lol
	condition LolCondition
	next      []LolCondition
}

func (this *lolWhere) Fetch(db *sql.DB) ([]*{{.Package}}.{{.StructName}}, error) {
	this.retrieval.scanner.InitPropagation(this.retrieval.selectColumns)
	this.retrieval.scanner.sql = this.Render()
	return this.retrieval.scanner.Scan(db)
}

func (this *lolWhere) Render() string {
	if len(this.next) > 0 {
		conds := make([]string, 0, len(this.next))
		for _, cond := range this.next {
			conds = append(conds, cond.Render())
		}
		return this.retrieval.Render() + " where (" + this.condition.Render() + ") " + strings.Join(conds, " ")
	}
	return this.retrieval.Render() + " where " + this.condition.Render()
}

func (this *lolWhere) And(cond LolCondition) *lolWhere {
	if this.next == nil {
		this.next = make([]LolCondition, 0, 1)
	}
	this.next = append(this.next, &lolConditionAnd{LolCondition: cond})
	return this
}

func (this *lolWhere) Or(cond LolCondition) *lolWhere {
	if this.next == nil {
		this.next = make([]LolCondition, 0, 1)
	}
	this.next = append(this.next, &lolConditionOr{LolCondition: cond})
	return this
}
`)

var LolConditionAnd_struct, _ = template.New("").Parse(`
type lolConditionAnd struct {
	HasNext
	LolCondition
}

func (this *lolConditionAnd) render() string {
	return "and (" + this.LolCondition.Render() + ")"
}

func (this *lolConditionAnd) Render() string {
	if this.Next() != nil {
		return this.render() + " " + this.Next().Render()
	}
	return this.render()
}

func (this *lolConditionAnd) And(cond LolCondition) LolCondition {
	this.SetNext(&lolConditionAnd{LolCondition:cond})
	return this
}

func (this *lolConditionAnd) Or(cond LolCondition) LolCondition {
	this.SetNext(&lolConditionOr{LolCondition:cond})
	return this
}

func (this *lolConditionAnd) Next() LolCondition {
	return this.HasNext.Next()
}

func (this *lolConditionAnd) SetNext(n LolCondition) {
	this.HasNext.SetNext(n)
}
`)

var LolConditionOr_struct, _ = template.New("").Parse(`
type lolConditionOr struct {
	HasNext
	LolCondition
}

func (this *lolConditionOr) render() string {
	return "or (" + this.LolCondition.Render() + ")"
}

func (this *lolConditionOr) Render() string {
	if this.Next() != nil {
		return this.render() + " " + this.Next().Render()
	}
	return this.render()
}

func (this *lolConditionOr) And(cond LolCondition) LolCondition {
	this.SetNext(&lolConditionAnd{LolCondition:cond})
	return this
}

func (this *lolConditionOr) Or(cond LolCondition) LolCondition {
	this.SetNext(&lolConditionOr{LolCondition:cond})
	return this
}

func (this *lolConditionOr) Next() LolCondition {
	return this.HasNext.Next()
}

func (this *lolConditionOr) SetNext(n LolCondition) {
	this.HasNext.SetNext(n)
}
`)

var ColumnStub_struct, _ = template.New("").Funcs(
	template.FuncMap{
		"Title": strings.Title,
		"ToLower": strings.ToLower,
		"DotToUnderscore": utils.DotToUnderscore}).Parse(`
{{range .}}
type {{index . 0 | ToLower | DotToUnderscore}}Stub struct { column }
var {{index . 0 | ToLower | DotToUnderscore}}StubConst {{index . 0 | ToLower | DotToUnderscore}}Stub
func {{index . 0 | Title | DotToUnderscore}}() *{{index . 0 | ToLower | DotToUnderscore}}Stub {return &{{index . 0 | ToLower | DotToUnderscore}}StubConst}
func (*{{index . 0 | ToLower | DotToUnderscore}}Stub) Column() string {return "{{index . 1}}"}
func (*{{index . 0 | ToLower | DotToUnderscore}}Stub) FieldName() string {return "{{index . 0 }}"}
{{end}}

var SelectAllColumns = []column{
{{range .}}&{{index . 0 | ToLower | DotToUnderscore}}StubConst, {{end}}
}
`)

var ConditionByField, _ = template.New("").Funcs(template.FuncMap{
	"Title": strings.Title,
	"ToLower": strings.ToLower,
	"DotToUnderscore": utils.DotToUnderscore}).Parse(`
type {{index .FieldToColumn 0 | ToLower}}{{Title .StructName}} struct {
	{{ToLower .Selector}}{{if .Selector}}_{{end}}{{index .FieldToColumn 0 | ToLower | DotToUnderscore}}Stub
	HasNext
	values   []{{.IsNullable}}{{.TypeName}}
	operation ConditionConstant
}

func (this *{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}) Values() []{{.IsNullable}}{{.TypeName}} {
	return this.values
}

func (this *{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}) render() string {
	if conditionRenderer, found := ConditionRenderingMap[this.operation]; found {
		return conditionRenderer(this)
	}
	panic("Not supported operation for: {{.TypeName}}")
}

func (this *{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}) Render() string {
	if this.Next() != nil {
		return this.render() + " " + this.Next().Render()
	}
	return this.render()
}

func (this *{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}) And(cond LolCondition) LolCondition {
	this.SetNext(&lolConditionAnd{LolCondition:cond})
	return this
}

func (this *{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}) Or(cond LolCondition) LolCondition {
	this.SetNext(&lolConditionOr{LolCondition:cond})
	return this
}

{{if .IsNullable}}
func {{index .FieldToColumn 0 | Title}}Is(values ...{{.IsNullable}}{{.TypeName}}) LolCondition {
	return &{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}{values:values, operation:DefineAmount(values, nil) | Equals}
}

func {{index .FieldToColumn 0 | Title}}IsNot(values ...{{.IsNullable}}{{.TypeName}}) LolCondition {
	return &{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}{values:values, operation:DefineAmount(values, nil) | Not | Equals}
}
{{else}}
func {{index .FieldToColumn 0 | Title}}Is(v0 {{.IsNullable}}{{.TypeName}}, vnext ...{{.IsNullable}}{{.TypeName}}) LolCondition {
	return &{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}{values:append([]{{.TypeName}}{v0}, vnext...), operation:DefineAmount(v0, vnext) | Equals}
}

func {{index .FieldToColumn 0 | Title}}IsNot(v0 {{.IsNullable}}{{.TypeName}}, vnext ...{{.IsNullable}}{{.TypeName}}) LolCondition {
	return &{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}{values:append([]{{.TypeName}}{v0}, vnext...), operation:DefineAmount(v0, vnext) | Not | Equals}
}
{{end}}

{{if .Likable}}{{if .IsNullable}}
func {{index .FieldToColumn 0 | Title}}Like(values ...{{.IsNullable}}{{.TypeName}}) LolCondition {
	return &{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}{values:values, operation:DefineAmount(values, nil) | Like}
}

func {{index .FieldToColumn 0 | Title}}NotLike(values ...{{.IsNullable}}{{.TypeName}}) LolCondition {
	return &{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}{values:values, operation:DefineAmount(values, nil) | Not | Like}
}
{{else}}
func {{index .FieldToColumn 0 | Title}}Like(v0 {{.TypeName}}, vnext ...{{.TypeName}}) LolCondition {
	return &{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}{values:append([]{{.TypeName}}{v0}, vnext...), operation:DefineAmount(v0, vnext) | Like}
}

func {{index .FieldToColumn 0 | Title}}NotLike(v0 {{.TypeName}}, vnext ...{{.TypeName}}) LolCondition {
	return &{{index .FieldToColumn 0 | ToLower}}{{Title .StructName}}{values:append([]{{.TypeName}}{v0}, vnext...), operation:DefineAmount(v0, vnext) | Not | Like}
}
{{end}}{{end}}
`)
